#!/bin/bash
#
#(execute my job from the current directory)
#$ -cwd
#
#(the same OS as login machine)
#$ -l arch=amd64
#$ -l os=sld6
#
#(the cpu time for my job)
#$ -l h_rt=23:59:00
#
#(the maximum memory for my job)
#$ -l h_vmem=5G
#
# stderr and stdout dirs
#$ -e /tmp
#$ -o /tmp
#

# TODO some variables are still hard coded ...


abs() {
  [ $1 -lt 0 ] && echo $((-$1)) || echo $1
}

# precision of the photon energy after calibration
calibrationPrecison=0.02

# the maximum number of steps to reah the required photon precision
maxNSteps=5

# particle type is obviously photon ...
particle="photon"

# detector geometry
detectorGeometry="ILD_l4_v02"

# input/output directory in afs pool dir
inputDirectory="/afs/desy.de/group/flc/pool/eteremi"
outputDirectory="/afs/desy.de/group/flc/pool/eteremi"

# ilcsoft version
ilcsoftVersion="v01-19-03-pre02"

# scripts dir
scriptsDirectory=""

if [ -z "$PANDORA_CALIBRATION_JOBS_DIR" ]; then
  scriptsDirectory="$HOME/soft/PandoraCalibrationJobs/scripts/calibration"
else
  scriptsDirectory="$PANDORA_CALIBRATION_JOBS_DIR/scripts/calibration"
fi


if [ "$#" -gt "1" ]; then
  ilcsoftVersion=$1
fi

if [ "$#" -gt "2" ]; then
  detectorGeometry=$2
fi

if [ "$#" -gt "3" ]; then
  inputDirectory=$3
fi

if [ "$#" -gt "4" ]; then
  outputDirectory=$4
fi

# run directory
runDirectory=`mktemp --dir`

# input/output file(s)
inputFile="ddsim-${particle}-s${ilcsoftVersion}-G${detectorGeometry}-calibration.slcio"
pfoAnalysisFile="marlin-calib-ecal-PfoAnalysis-${particle}-s${ilcsoftVersion}-G${detectorGeometry}.root"
ecalMipCalibrationFile="calibration-ecal-mip.txt"  # temporary file name for convenience

ecalCalibCalibrationFileBase="calibration-ecal-calib"
calibPfoAnalysisFileBase="marlin-calib-ecal-calib-PfoAnalysis-${particle}-s${ilcsoftVersion}-G${detectorGeometry}"

# log file base name
logFileBase="marlin-calib-ecal-${particle}-s${ilcsoftVersion}-G${detectorGeometry}"


# ==============
# Start of script

# create output directory
if [ ! -d "$outputDirectory" ]; then
  echo "Creating output directory: $outputDirectory"
  mkdir -p $outputDirectory

  if [ "$?" -neq "0" ]; then
    echo "Couldn't create output directory: $outputDirectory"
    exit 1
  fi
fi


# cd run directory and copy needed scripts for simulation
cd $runDirectory
cp $scriptsDirectory/* .
cp -r /afs/desy.de/project/ilcsoft/sw/ILDConfig/trunk/StandardConfig/lcgeo_current/* .

# ilcsoft stuff
unset MARLIN_DLL
source /afs/desy.de/project/ilcsoft/sw/x86_64_gcc49_sl6/${ilcsoftVersion}/init_ilcsoft.sh

echo "Running with ilcsoft version ${ilcsoftVersion}"
echo "Running with detector geometry ${detectorGeometry}"

# Start by converting the dd4hep geometry to gear for current ilcsoft version
convertToGear default ${lcgeo_DIR}/ILD/compact/${detectorGeometry}/${detectorGeometry}.xml gear_${detectorGeometry}_dd4hep.xml


# extract the ecal mip from PfoAnalysis root file
pandoraAnalysisVersion=`ls ${ILCSOFT}/PandoraAnalysis | awk '{print $1}'`
${ILCSOFT}/PandoraAnalysis/${pandoraAnalysisVersion}/bin/SimCaloHitEnergyDistribution -a ${inputDirectory}/${pfoAnalysisFile} -b 10 -c ./
mv Calibration.txt ${ecalMipCalibrationFile}

ecalMip=`./extract-calibration-constants ${ecalMipCalibrationFile} echo-ecal`
ret=$?

echo "ECal mip constant is : $ecalMip"

if [ $ret -ne 0 ]; then
  echo "Couldn't extract the ecal mip constant !"
  exit $ret
fi

# the nth last layers of the ecal (normally the 10th last) are twice thicker.
# Change the following factor to adjust the calibrationFactor2 variable
ecalLayerFactor=2

calibrationFactor1=0.00616054
calibrationFactor2=`echo ${calibrationFactor1}*${ecalLayerFactor} | bc -l`

currentPrecision=0
finalPrecison=0
goodPrecisionReached=0
finalStep=${maxNSteps}
calibrationFactorRescale=1
finalCalibrationFactor1=${calibrationFactor1}
finalCalibrationFactor2=${calibrationFactor2}

# calibration iteration

for step in `seq 1 ${maxNSteps}`
do
  # recalculate the calibration factor
  calibrationFactor1=`echo ${calibrationFactor1}*${calibrationFactorRescale} | bc -l`
  calibrationFactor2=`echo ${calibrationFactor2}*${calibrationFactorRescale} | bc -l`

  echo ""
  echo "=============================="
  echo "= RUNNING MARLIN (step ${step}) ="
  echo "=============================="

  Marlin --global.LCIOInputFiles="${inputDirectory}/${inputFile}" \
    --global.GearXMLFile=gear_${detectorGeometry}_dd4hep.xml \
    --InitDD4hep.DD4hepXMLFile=${lcgeo_DIR}/ILD/compact/${detectorGeometry}/${detectorGeometry}.xml \
    --MyEcalBarrelReco.calibration_factorsMipGev="${calibrationFactor1} ${calibrationFactor2}" \
    --MyEcalEndcapReco.calibration_factorsMipGev="${calibrationFactor1} ${calibrationFactor2}" \
    --MyEcalRingReco.calibration_factorsMipGev="${calibrationFactor1} ${calibrationFactor2}" \
    --global.MaxRecordNumber=100 \
    bbudsc_3evt_stdreco_dd4hep.xml \
    > ${logFileBase}_step${step}.log

    mv PfoAnalysis.root ${calibPfoAnalysisFileBase}_step${step}.root

    # run the calibration for this step
    ${ILCSOFT}/PandoraAnalysis/${pandoraAnalysisVersion}/bin/ECalDigitisation_ContainedEvents -a ${calibPfoAnalysisFileBase}_step${step}.root -b 10 -d ./
    mv Calibration.txt ${ecalCalibCalibrationFileBase}_step${step}.txt

    # save current step output for further analysis
    cp ${ecalCalibCalibrationFileBase}_step${step}.txt ${outputDirectory}
    cp ${calibPfoAnalysisFileBase}_step${step}.root ${outputDirectory}
    cp ${logFileBase}_step${step}.log ${outputDirectory}

    # extract the ecal calib mip scaling factor
    calibrationFactorRescale=`./extract-ecal-rescaling-factor ${ecalCalibCalibrationFileBase}_step${step}.txt`
    currentPrecision=`echo 1 - 1/${calibrationFactorRescale} | bc -l`

    echo "==========================="
    echo "=   Current step output   ="
    echo "= current calibration factor 1 : ${calibrationFactor1}"
    echo "= current calibration factor 2 : ${calibrationFactor2}"
    echo "= current precision            : ${currentPrecision}"
    echo "= current rescaling factor     : ${calibrationFactorRescale}"
    echo ""

    if [ `echo ${currentPrecision}'<'${calibrationPrecison} | bc -l` -eq 1 ]; then

      echo "==========================="
      echo "= Precision reached !!!!! ="
      echo "==========================="

      # save settings
      cp ${ecalCalibCalibrationFileBase}_step${step}.txt ${ecalCalibCalibrationFileBase}_finalStep.txt
      cp ${calibPfoAnalysisFileBase}_step${step}.root ${calibPfoAnalysisFileBase}_finalStep.root

      finalPrecison=${currentPrecision}
      finalCalibrationFactor1=`echo ${calibrationFactor1}*${calibrationFactorRescale} | bc -l`
      finalCalibrationFactor2=`echo ${calibrationFactor2}*${calibrationFactorRescale} | bc -l`
      finalEcalCalibCalibrationFile=${ecalCalibCalibrationFileBase}_finalStep.txt
      goodPrecisionReached=1
      finalStep=${step}

      break
    fi

done

echo "====================================="
echo "=         Calibration summary       ="
echo "= "
echo "= Final precison reached : ${goodPrecisionReached}"

exitStatus=0

if [ ${goodPrecisionReached} ]; then
  echo "= Number of steps            : ${finalStep}"
  echo "= Final calibration factor 1 : ${calibrationFactor1}"
  echo "= Final calibration factor 2 : ${calibrationFactor2}"
  echo "= Final calibration file     : ${finalEcalCalibCalibrationFile}"
  echo "= Final precison             : ${finalPrecison}"

  cp ${finalEcalCalibCalibrationFile} ${outputDirectory}
  cp ${calibPfoAnalysisFileBase}_finalStep.root ${outputDirectory}
else
  echo "= !!!!! Failed after ${maxNSteps} iterations !!!!!"
  exitStatus=1
fi


# clean up run directory
rm -rf ${runDirectory}

exit ${exitStatus}

#
